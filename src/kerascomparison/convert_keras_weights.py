
# Keras
# Element for each layer
    # [0] for each input one value per neuron (so 7 times an array with 45)
    # [1] Bias for each neuron
# What I need
# Element for each layer
    # for each neuron one array with 7 entries
import numpy as np
"""weights = [[[-0.00376929,  0.03486726],
       [ 0.01342994,  0.0231015 ],
       [ 0.01735607, -0.03529174]], [ 0.00200979, -0.00523797],[[ 0.56883514,  0.89121616,  1.03019452],
       [ 0.86656129,  0.84186172, -0.60320234]],[ 0.,  0.,  0.]]
"""
weights =  [ np.array([[-0.01996855,  0.01460208, -0.00019697, -0.01353073,  0.00926964,
         0.01871866,  0.02494468, -0.01822129,  0.00966323, -0.0161053 ,
        -0.01191924, -0.00405759, -0.00283481,  0.01270807, -0.02161345,
        -0.00053218, -0.0212792 , -0.02017246,  0.0192316 , -0.01392365,
         0.00762498, -0.01837645, -0.02162676, -0.01687474, -0.01736244,
         0.00807143, -0.01325687, -0.00377214, -0.01468555, -0.01482626,
        -0.00885114, -0.00047687,  0.01441799, -0.00448018,  0.02244681,
         0.02351148, -0.00965099,  0.00116822,  0.0356392 , -0.01799307,
         0.01313634,  0.01413441,  0.01941307,  0.0109139 , -0.03380445],
       [-0.03993709,  0.02920417, -0.00039394, -0.02706147,  0.01853928,
         0.03743732,  0.04988935, -0.03644259,  0.01932646, -0.0322106 ,
        -0.02383847, -0.00811517, -0.00566962,  0.02541614, -0.04322691,
        -0.00106435, -0.04255841, -0.04034492,  0.03846319, -0.02784731,
         0.01524997, -0.03675289, -0.04325353, -0.03374948, -0.03472487,
         0.01614285, -0.02651374, -0.00754428, -0.02937111, -0.02965252,
        -0.01770227, -0.00095374,  0.02883598, -0.00896036,  0.04489362,
         0.04702297, -0.01930197,  0.00233644,  0.07127839, -0.03598614,
         0.02627268,  0.02826882,  0.03882614,  0.02182779, -0.06760891],
       [-0.05990564,  0.04380625, -0.00059091, -0.04059221,  0.02780892,
         0.05615598,  0.07483403, -0.05466389,  0.02898968, -0.04831591,
        -0.03575771, -0.01217275, -0.00850444,  0.03812421, -0.06484037,
        -0.00159653, -0.06383762, -0.06051737,  0.05769479, -0.04177097,
         0.02287495, -0.05512933, -0.06488029, -0.05062422, -0.05208731,
         0.02421428, -0.03977061, -0.01131642, -0.04405666, -0.04447879,
        -0.02655341, -0.00143061,  0.04325397, -0.01344053,  0.06734043,
         0.07053445, -0.02895296,  0.00350467,  0.10691759, -0.05397921,
         0.03940902,  0.04240322,  0.05823921,  0.03274168, -0.10141335],
       [-0.07987419,  0.05840833, -0.00078789, -0.05412294,  0.03707856,
         0.07487464,  0.0997787 , -0.07288519,  0.03865291, -0.06442121,
        -0.04767694, -0.01623034, -0.01133924,  0.05083228, -0.08645382,
        -0.00212871, -0.08511682, -0.08068983,  0.07692638, -0.05569462,
         0.03049993, -0.07350577, -0.08650705, -0.06749895, -0.06944975,
         0.03228571, -0.05302748, -0.01508855, -0.05874221, -0.05930504,
        -0.03540454, -0.00190748,  0.05767196, -0.01792071,  0.08978724,
         0.09404594, -0.03860394,  0.00467289,  0.14255679, -0.07197228,
         0.05254536,  0.05653764,  0.07765228,  0.04365559, -0.13521782],
       [-0.09984274,  0.07301041, -0.00098487, -0.06765368,  0.0463482 ,
         0.0935933 ,  0.12472337, -0.09110648,  0.04831614, -0.08052651,
        -0.05959617, -0.02028793, -0.01417406,  0.06354035, -0.10806727,
        -0.00266088, -0.10639602, -0.10086229,  0.09615798, -0.06961828,
         0.03812492, -0.09188223, -0.10813381, -0.08437369, -0.08681218,
         0.04035714, -0.06628435, -0.0188607 , -0.07342777, -0.0741313 ,
        -0.04425568, -0.00238435,  0.07208994, -0.02240089,  0.11223404,
         0.11755741, -0.04825492,  0.00584111,  0.17819597, -0.08996534,
         0.06568171,  0.07067204,  0.09706536,  0.05456948, -0.16902226],
       [-0.12389845,  0.07601406,  0.00887957, -0.06886759,  0.05307528,
         0.10945695,  0.15051141, -0.10758436,  0.05075426, -0.09010418,
        -0.07882769, -0.0258297 , -0.00885314,  0.06828247, -0.12674655,
         0.00203156, -0.13067867, -0.11649879,  0.11070006, -0.08288884,
         0.04264203, -0.10526051, -0.13123709, -0.09498158, -0.11047304,
         0.04084697, -0.06654494, -0.01088296, -0.074134  , -0.07898264,
        -0.04978458, -0.00230719,  0.07387392, -0.01988694,  0.13260637,
         0.14429836, -0.04560183,  0.01426091,  0.21603055, -0.10444416,
         0.07826021,  0.08223718,  0.11316346,  0.07239497, -0.2032233 ],
       [-0.13977982,  0.10221458, -0.0013788 , -0.09471515,  0.06488748,
         0.13103062,  0.17461273, -0.12754907,  0.06764259, -0.1127371 ,
        -0.08343464, -0.0284031 , -0.01984368,  0.08895649, -0.15129419,
        -0.00372524, -0.14895444, -0.1412072 ,  0.13462117, -0.09746559,
         0.05337488, -0.12863511, -0.15138736, -0.11812317, -0.12153704,
         0.05649999, -0.09279809, -0.02640497, -0.10279887, -0.10378382,
        -0.06195795, -0.00333809,  0.10092592, -0.03136125,  0.15712768,
         0.16458039, -0.0675569 ,  0.00817755,  0.24947439, -0.12595148,
         0.09195438,  0.09894086,  0.13589148,  0.07639727, -0.23663116]], dtype="float32"),
 np.array([-0.01996855,  0.01460208, -0.00019697, -0.01353073,  0.00926964,
        0.01871866,  0.02494468, -0.0182213 ,  0.00966323, -0.0161053 ,
       -0.01191924, -0.00405758, -0.00283481,  0.01270807, -0.02161346,
       -0.00053218, -0.0212792 , -0.02017246,  0.0192316 , -0.01392365,
        0.00762498, -0.01837644, -0.02162676, -0.01687474, -0.01736244,
        0.00807143, -0.01325687, -0.00377214, -0.01468555, -0.01482626,
       -0.00885114, -0.00047687,  0.01441799, -0.00448018,  0.02244681,
        0.02351148, -0.00965099,  0.00116822,  0.0356392 , -0.01799307,
        0.01313634,  0.01413441,  0.01941307,  0.0109139 , -0.03380445], dtype="float32"),
 np.array([[-0.00347397, -0.01123925, -0.01476208, -0.02221778, -0.0275006 ,
        -0.03487388],
       [ 0.03561152,  0.06725086,  0.10321686,  0.13531913,  0.1651372 ,
         0.19684617],
       [-0.01214429, -0.01645116, -0.02869656, -0.03365281, -0.04053204,
        -0.0454152 ],
       [-0.02884968, -0.05182307, -0.0809518 , -0.10450177, -0.1273092 ,
        -0.15056559],
       [ 0.01551762,  0.02908015,  0.04475155,  0.05853279,  0.07141216,
         0.08502413],
       [ 0.02414413,  0.04709906,  0.07148811,  0.09464286,  0.11562218,
         0.13849613],
       [ 0.01795818,  0.03723421,  0.05538128,  0.07463896,  0.09136066,
         0.11038873],
       [-0.02117804, -0.0414813 , -0.06287469, -0.08334046, -0.10182789,
        -0.12204577],
       [ 0.02312163,  0.04159147,  0.06493693,  0.08386448,  0.10217287,
         0.12086459],
       [-0.03169614, -0.06059621, -0.09261011, -0.12186615, -0.14878097,
        -0.17767999],
       [ 0.00457853,  0.00252516,  0.00713058,  0.00560082,  0.00632861,
         0.00480592],
       [ 0.00067259, -0.00002865,  0.00064667,  0.00005264, -0.0000432 ,
        -0.00063242],
       [-0.01576013, -0.02527483, -0.04117814, -0.05123795, -0.06215718,
        -0.07208519],
       [ 0.02961201,  0.05502469,  0.08492874,  0.11079429,  0.13513409,
         0.16068104],
       [-0.03185231, -0.06284612, -0.09502371, -0.12622729, -0.15426485,
        -0.18509129],
       [-0.01237966, -0.02045161, -0.03294557, -0.04140035, -0.05028094,
        -0.05862657],
       [-0.00785665, -0.01886101, -0.02680813, -0.03760953, -0.04622982,
        -0.05690654],
       [-0.03909644, -0.07745992, -0.1169566 , -0.15555324, -0.19013008,
        -0.22826077],
       [ 0.034231  ,  0.0669581 ,  0.10153691,  0.13453351,  0.16436991,
         0.19696668],
       [-0.01314844, -0.02613641, -0.03941972, -0.05247958, -0.0641517 ,
        -0.07705405],
       [ 0.01518857,  0.02788845,  0.04322578,  0.05618335,  0.06849784,
         0.08129512],
       [-0.04174589, -0.08284384, -0.12501749, -0.16635421, -0.20334256,
        -0.24418046],
       [-0.0134249 , -0.02857323, -0.04214159, -0.05722023, -0.07009538,
        -0.0849954 ],
       [-0.03950318, -0.07746926, -0.11737441, -0.15563646, -0.19016889,
        -0.22796769],
       [ 0.00045351, -0.00526856, -0.00482921, -0.010081  , -0.01280908,
        -0.01800819],
       [ 0.02180802,  0.03841856,  0.06043522,  0.07753889,  0.09439614,
         0.11128499],
       [-0.0261044 , -0.04552826, -0.07188101, -0.09192994, -0.1118753 ,
        -0.13167141],
       [-0.01341003, -0.01820663, -0.03172843, -0.037239  , -0.04485593,
        -0.05028543],
       [-0.02875467, -0.05125451, -0.0802861 , -0.10339078, -0.1259212 ,
        -0.14873703],
       [-0.03781609, -0.072606  , -0.11080216, -0.14599326, -0.17826203,
        -0.21302427],
       [-0.01622151, -0.02994968, -0.04633057, -0.06032146, -0.07355693,
        -0.0873751 ],
       [-0.00155903, -0.0028123 , -0.00438644, -0.00566998, -0.00690847,
        -0.00817603],
       [ 0.03235953,  0.05965734,  0.09233455,  0.12016311,  0.14652136,
         0.17400621],
       [-0.0169664 , -0.02878088, -0.04590622, -0.05818837, -0.07074076,
        -0.08286624],
       [ 0.0265674 ,  0.05261111,  0.07945041,  0.10565451,  0.12913769,
         0.15502539],
       [ 0.00821331,  0.01992994,  0.02823849,  0.03972682,  0.04884638,
         0.06020238],
       [-0.01966914, -0.03146182, -0.05130941, -0.0637886 , -0.07737458,
        -0.08969004],
       [-0.01269138, -0.01938942, -0.03219317, -0.03940326, -0.04770723,
        -0.05482026],
       [ 0.02370606,  0.05030281,  0.07426173,  0.100747  ,  0.12340485,
         0.14957617],
       [-0.02720403, -0.05270446, -0.08018333, -0.1059365 , -0.12939009,
        -0.15483029],
       [ 0.01012604,  0.02035536,  0.03058596,  0.04085344,  0.04995763,
         0.06010167],
       [ 0.01795219,  0.03445037,  0.05258293,  0.06927289,  0.0845828 ,
         0.10106932],
       [ 0.03083484,  0.06038275,  0.09153108,  0.12131663,  0.14822724,
         0.17765199],
       [-0.00556412, -0.00462095, -0.01022249, -0.00979796, -0.01147   ,
        -0.01103946],
       [-0.02961013, -0.06100286, -0.09092325, -0.12231533, -0.14968866,
        -0.18070583]], dtype="float32"),
 np.array([ 0.06046785,  0.12375283,  0.18485175,  0.24819779,  0.30368009,
        0.36626831], dtype="float32")];

layers = []
bias = False
for layer in weights:
    if not bias:
        units = []
        for i in range(len(layer)):
            unitWeights = layer[i]
            if len(unitWeights) > len(units):
                for j in range(len(unitWeights)):
                    units.append([]);
            for j in range(len(unitWeights)):
                units[j].append(unitWeights[j])
    else:
        for j in range(len(layer)):
            units[j].append(layer[j])
    if bias:
        layers.append(units)
    bias = not bias

import json
from json import encoder

def pretty_floats(obj):
    if isinstance(obj, float):
        return obj
    elif isinstance(obj, dict):
        return dict((k, pretty_floats(v)) for k, v in obj.items())
    elif isinstance(obj, (list, tuple)):
        return list(map(lambda x: pretty_floats(x), obj))             
    out = np.asscalar(obj)
    return out
print(json.dumps(pretty_floats(layers), indent=4, sort_keys=True))