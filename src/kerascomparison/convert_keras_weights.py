
# Keras
# Element for each layer
    # [0] for each input one value per neuron (so 7 times an array with 45)
    # [1] Bias for each neuron
# What I need
# Element for each layer
    # for each neuron one array with 7 entries
import numpy as np
"""weights = [[[-0.00376929,  0.03486726],
       [ 0.01342994,  0.0231015 ],
       [ 0.01735607, -0.03529174]], [ 0.00200979, -0.00523797],[[ 0.56883514,  0.89121616,  1.03019452],
       [ 0.86656129,  0.84186172, -0.60320234]],[ 0.,  0.,  0.]]
"""
weights = [ np.array([[ 0.00004808,  0.00033596, -0.00020831, -0.00021137,  0.00009182,
        -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
         0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
        -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
        -0.0000136 , -0.00025663,  0.00007328, -0.00021454,  0.00021275,
         0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
        -0.00015984,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
         0.00001183, -0.00018918, -0.00005797,  0.00004326,  0.00000267,
         0.00011979,  0.00008574, -0.00013252, -0.00025317, -0.00014164],
       [ 0.00004808,  0.00033596, -0.00020831, -0.00021137,  0.00009182,
        -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
         0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
        -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
        -0.0000136 , -0.00025663,  0.00007328, -0.00021454,  0.00021275,
         0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
        -0.00015984,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
         0.00001183, -0.00018918, -0.00005797,  0.00004326,  0.00000267,
         0.00011979,  0.00008575, -0.00013252, -0.00025317, -0.00014164],
       [ 0.00004808,  0.00033596, -0.00020831, -0.00021137,  0.00009182,
        -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
         0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
        -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
        -0.0000136 , -0.00025663,  0.00007329, -0.00021454,  0.00021275,
         0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
        -0.00015983,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
         0.00001183, -0.00018918, -0.00005797,  0.00004326,  0.00000267,
         0.00011979,  0.00008575, -0.00013252, -0.00025317, -0.00014164],
       [ 0.00004808,  0.00033596, -0.00020831, -0.00021137,  0.00009182,
        -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
         0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
        -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
        -0.00001361, -0.00025663,  0.00007329, -0.00021454,  0.00021275,
         0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
        -0.00015983,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
         0.00001183, -0.00018918, -0.00005797,  0.00004327,  0.00000267,
         0.00011979,  0.00008574, -0.00013252, -0.00025316, -0.00014164],
       [ 0.00004808,  0.00033596, -0.00020831, -0.00021137,  0.00009182,
        -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
         0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
        -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
        -0.0000136 , -0.00025663,  0.00007329, -0.00021454,  0.00021275,
         0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
        -0.00015983,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
         0.00001183, -0.00018918, -0.00005797,  0.00004327,  0.00000267,
         0.00011979,  0.00008574, -0.00013252, -0.00025317, -0.00014164],
       [ 0.00004808,  0.00033596, -0.0002083 , -0.00021137,  0.00009182,
        -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
         0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
        -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
        -0.0000136 , -0.00025663,  0.00007328, -0.00021454,  0.00021275,
         0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
        -0.00015984,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
         0.00001183, -0.00018918, -0.00005797,  0.00004326,  0.00000267,
         0.00011979,  0.00008574, -0.00013252, -0.00025317, -0.00014164],
       [ 0.00004808,  0.00033596, -0.00020831, -0.00021137,  0.00009182,
        -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
         0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
        -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
        -0.0000136 , -0.00025663,  0.00007329, -0.00021454,  0.00021275,
         0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
        -0.00015984,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
         0.00001183, -0.00018918, -0.00005797,  0.00004326,  0.00000267,
         0.00011979,  0.00008574, -0.00013252, -0.00025316, -0.00014164]], dtype='float32'),
 np.array([ 0.00004808,  0.00033596, -0.00020831, -0.00021137,  0.00009182,
       -0.00004127,  0.00025356, -0.00011126,  0.00019431, -0.00022856,
        0.00007076,  0.0002084 , -0.00021092,  0.00006265, -0.00007411,
       -0.00003051,  0.00006167, -0.0001311 ,  0.00016432,  0.00000923,
       -0.00001361, -0.00025663,  0.00007329, -0.00021454,  0.00021275,
        0.00021453, -0.00025789, -0.00019304, -0.0002465 , -0.00018866,
       -0.00015984,  0.00015657,  0.00021074, -0.00007178,  0.00002992,
        0.00001183, -0.00018918, -0.00005797,  0.00004326,  0.00000267,
        0.00011979,  0.00008575, -0.00013252, -0.00025316, -0.00014164], dtype='float32'),
 np.array([[-0.00020533, -0.0002258 , -0.00021314, -0.00021202, -0.00021852,
        -0.00021866],
       [ 0.00010879,  0.00011963,  0.00011293,  0.00011234,  0.00011578,
         0.00011585],
       [ 0.00015973,  0.00017565,  0.00016581,  0.00016494,  0.00016999,
         0.0001701 ],
       [-0.00006008, -0.00006606, -0.00006236, -0.00006203, -0.00006393,
        -0.00006397],
       [ 0.00002654,  0.00002918,  0.00002755,  0.0000274 ,  0.00002824,
         0.00002826],
       [ 0.00019272,  0.00021193,  0.00020005,  0.000199  ,  0.0002051 ,
         0.00020523],
       [ 0.00002933,  0.00003225,  0.00003045,  0.00003029,  0.00003122,
         0.00003123],
       [-0.00000984, -0.00001082, -0.00001021, -0.00001016, -0.00001047,
        -0.00001048],
       [ 0.00005923,  0.00006514,  0.00006149,  0.00006117,  0.00006304,
         0.00006308],
       [-0.00025755, -0.00028322, -0.00026735, -0.00026594, -0.00027409,
        -0.00027427],
       [-0.00027652, -0.00030409, -0.00028704, -0.00028554, -0.00029429,
        -0.00029448],
       [ 0.00000619,  0.00000681,  0.00000643,  0.0000064 ,  0.00000659,
         0.00000659],
       [ 0.00014478,  0.00015921,  0.00015029,  0.0001495 ,  0.00015408,
         0.00015418],
       [ 0.00006742,  0.00007415,  0.00006999,  0.00006962,  0.00007176,
         0.0000718 ],
       [-0.00011885, -0.0001307 , -0.00012337, -0.00012272, -0.00012648,
        -0.00012656],
       [-0.00011596, -0.00012752, -0.00012037, -0.00011974, -0.00012341,
        -0.00012349],
       [-0.00033243, -0.00036557, -0.00034508, -0.00034327, -0.00035379,
        -0.00035401],
       [-0.00047004, -0.0005169 , -0.00048792, -0.00048536, -0.00050023,
        -0.00050055],
       [ 0.00010108,  0.00011115,  0.00010492,  0.00010437,  0.00010757,
         0.00010764],
       [-0.0002719 , -0.00029901, -0.00028224, -0.00028077, -0.00028937,
        -0.00028955],
       [-0.00016954, -0.00018644, -0.00017599, -0.00017506, -0.00018043,
        -0.00018054],
       [-0.00033467, -0.00036803, -0.0003474 , -0.00034558, -0.00035616,
        -0.00035639],
       [-0.00038664, -0.00042519, -0.00040135, -0.00039925, -0.00041148,
        -0.00041174],
       [-0.00014847, -0.00016328, -0.00015412, -0.00015331, -0.00015801,
        -0.00015811],
       [-0.00013835, -0.00015214, -0.00014361, -0.00014286, -0.00014723,
        -0.00014733],
       [-0.0001952 , -0.00021466, -0.00020263, -0.00020156, -0.00020774,
        -0.00020787],
       [-0.0000121 , -0.0000133 , -0.00001255, -0.00001249, -0.00001287,
        -0.00001288],
       [ 0.00017895,  0.00019679,  0.00018576,  0.00018479,  0.00019044,
         0.00019057],
       [ 0.00001496,  0.00001645,  0.00001553,  0.00001545,  0.00001592,
         0.00001593],
       [-0.00009084, -0.0000999 , -0.0000943 , -0.00009381, -0.00009668,
        -0.00009674],
       [ 0.00013606,  0.00014962,  0.00014123,  0.00014049,  0.0001448 ,
         0.00014489],
       [-0.00000634, -0.00000697, -0.00000658, -0.00000655, -0.00000675,
        -0.00000675],
       [ 0.00001692,  0.00001861,  0.00001756,  0.00001747,  0.00001801,
         0.00001802],
       [ 0.00009615,  0.00010574,  0.00009981,  0.00009929,  0.00010233,
         0.00010239],
       [ 0.00022907,  0.0002519 ,  0.00023778,  0.00023654,  0.00024378,
         0.00024394],
       [ 0.00011442,  0.00012583,  0.00011877,  0.00011815,  0.00012177,
         0.00012185],
       [ 0.00017633,  0.00019392,  0.00018304,  0.00018208,  0.00018766,
         0.00018778],
       [ 0.00021924,  0.0002411 ,  0.00022758,  0.00022639,  0.00023332,
         0.00023347],
       [ 0.00035697,  0.00039256,  0.00037055,  0.00036861,  0.0003799 ,
         0.00038014],
       [ 0.00006735,  0.00007406,  0.00006991,  0.00006955,  0.00007168,
         0.00007172],
       [ 0.00010039,  0.0001104 ,  0.00010421,  0.00010367,  0.00010684,
         0.00010691],
       [ 0.00006845,  0.00007527,  0.00007105,  0.00007068,  0.00007284,
         0.00007289],
       [ 0.00013217,  0.00014535,  0.0001372 ,  0.00013648,  0.00014066,
         0.00014075],
       [ 0.00019395,  0.00021328,  0.00020133,  0.00020027,  0.00020641,
         0.00020654],
       [-0.00050057, -0.00055047, -0.00051962, -0.00051689, -0.00053273,
        -0.00053307]], dtype='float32'),
 np.array([ 0.00314122,  0.00345439,  0.00326074,  0.00324364,  0.003343  ,
        0.00334514], dtype='float32')]; 

layers = []
bias = False
for layer in weights:
    if not bias:
        units = []
        for i in range(len(layer)):
            unitWeights = layer[i]
            if len(unitWeights) > len(units):
                for j in range(len(unitWeights)):
                    units.append([]);
            for j in range(len(unitWeights)):
                units[j].append(unitWeights[j])
    else:
        for j in range(len(layer)):
            units[j].append(layer[j])
    if bias:
        layers.append(units)
    bias = not bias

import json
from json import encoder

def pretty_floats(obj):
    if isinstance(obj, float):
        return obj
    elif isinstance(obj, dict):
        return dict((k, pretty_floats(v)) for k, v in obj.items())
    elif isinstance(obj, (list, tuple)):
        return list(map(lambda x: pretty_floats(x), obj))             
    out = np.asscalar(obj)
    return out
print(json.dumps(pretty_floats(layers), indent=4, sort_keys=True))