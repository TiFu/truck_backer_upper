
# Keras
# Element for each layer
    # [0] for each input one value per neuron (so 7 times an array with 45)
    # [1] Bias for each neuron
# What I need
# Element for each layer
    # for each neuron one array with 7 entries
import numpy as np
"""weights = [[[-0.00376929,  0.03486726],
       [ 0.01342994,  0.0231015 ],
       [ 0.01735607, -0.03529174]], [ 0.00200979, -0.00523797],[[ 0.56883514,  0.89121616,  1.03019452],
       [ 0.86656129,  0.84186172, -0.60320234]],[ 0.,  0.,  0.]]
"""
weights =  [ np.array([[-0.00596871,  0.02173759, -0.02248017, -0.02286897,  0.03545291,
         0.04430304,  0.04385605, -0.04647953,  0.03241556, -0.03367988,
         0.01376517,  0.00260948, -0.02714422,  0.03247999, -0.05082935,
        -0.02663123, -0.01880552, -0.03927064,  0.04132488, -0.03196675,
         0.03469165, -0.03715397, -0.03311674, -0.03374657,  0.00669732,
         0.03194622, -0.02224431, -0.02227835, -0.02129039, -0.02308419,
        -0.03571432, -0.00354539,  0.02183301, -0.02881775,  0.05012235,
         0.01953443, -0.023398  , -0.02543629,  0.05460764, -0.04667671,
         0.02564207,  0.03845476,  0.04927322, -0.01705972, -0.05862813],
       [-0.01193742,  0.04347518, -0.04496034, -0.04573795,  0.07090581,
         0.08860607,  0.08771209, -0.09295906,  0.06483112, -0.06735976,
         0.02753034,  0.00521896, -0.05428844,  0.06495999, -0.10165872,
        -0.05326246, -0.03761104, -0.07854128,  0.08264977, -0.06393349,
         0.06938331, -0.07430795, -0.06623349, -0.06749313,  0.01339464,
         0.06389244, -0.04448863, -0.04455669, -0.04258078, -0.04616837,
        -0.07142866, -0.00709078,  0.04366602, -0.05763549,  0.10024469,
         0.03906886, -0.046796  , -0.05087258,  0.10921527, -0.09335342,
         0.05128415,  0.07690951,  0.09854644, -0.03411945, -0.11725625],
       [-0.01790613,  0.06521277, -0.06744051, -0.06860692,  0.10635871,
         0.13290912,  0.13156815, -0.1394386 ,  0.09724668, -0.10103963,
         0.04129551,  0.00782843, -0.08143267,  0.09743999, -0.15248808,
        -0.07989369, -0.05641657, -0.11781192,  0.12397466, -0.09590022,
         0.10407495, -0.11146192, -0.09935024, -0.1012397 ,  0.02009197,
         0.09583866, -0.06673294, -0.06683504, -0.06387118, -0.06925257,
        -0.10714298, -0.01063617,  0.06549904, -0.08645324,  0.15036705,
         0.05860329, -0.07019401, -0.07630888,  0.1638229 , -0.14003013,
         0.07692622,  0.11536425,  0.14781965, -0.05117917, -0.17588438],
       [-0.02387484,  0.08695036, -0.08992068, -0.09147589,  0.14181162,
         0.17721216,  0.17542419, -0.18591815,  0.12966225, -0.13471952,
         0.05506068,  0.01043791, -0.10857689,  0.12991998, -0.20331743,
        -0.10652491, -0.0752221 , -0.15708256,  0.16529953, -0.12786698,
         0.1387666 , -0.1486159 , -0.13246699, -0.13498627,  0.02678928,
         0.12778488, -0.08897725, -0.08911338, -0.08516157, -0.09233674,
        -0.14285731, -0.01418157,  0.08733205, -0.11527099,  0.20048939,
         0.07813773, -0.093592  , -0.10174517,  0.21843055, -0.18670684,
         0.10256828,  0.15381901,  0.19709288, -0.06823889, -0.23451252],
       [-0.02984356,  0.10868794, -0.11240085, -0.11434487,  0.17726451,
         0.22151518,  0.21928027, -0.23239768,  0.1620778 , -0.16839939,
         0.06882585,  0.01304738, -0.13572112,  0.16239996, -0.25414681,
        -0.13315615, -0.09402762, -0.1963532 ,  0.20662442, -0.1598337 ,
         0.17345826, -0.18576986, -0.16558373, -0.16873282,  0.0334866 ,
         0.15973112, -0.11122157, -0.11139173, -0.10645194, -0.11542092,
        -0.17857164, -0.01772695,  0.10916506, -0.14408875,  0.25061175,
         0.09767215, -0.11699001, -0.12718146,  0.27303818, -0.23338355,
         0.12821035,  0.19227377,  0.24636608, -0.08529861, -0.29314065],
       [-0.02573214,  0.1203045 , -0.1221102 , -0.12664518,  0.17977531,
         0.22440213,  0.2184467 , -0.23409659,  0.16929758, -0.17506275,
         0.07604169,  0.0145232 , -0.1438175 ,  0.17029274, -0.25700015,
        -0.13837272, -0.09108445, -0.20093104,  0.21132322, -0.16048607,
         0.17655976, -0.19062433, -0.16412547, -0.17488645,  0.03982194,
         0.16732937, -0.12423536, -0.12266695, -0.12044264, -0.12551259,
        -0.18190098, -0.01827405,  0.12171525, -0.15102647,  0.2526612 ,
         0.09446928, -0.12923239, -0.13441305,  0.27089781, -0.23686628,
         0.128787  ,  0.19486439,  0.24957083, -0.09232321, -0.29272801],
       [-0.04178097,  0.15216312, -0.15736119, -0.16008282,  0.24817032,
         0.3101213 ,  0.30699232, -0.32535672,  0.22690894, -0.23575915,
         0.09635618,  0.01826634, -0.19000955,  0.22735995, -0.35580552,
        -0.18641859, -0.13163865, -0.27489448,  0.28927419, -0.22376721,
         0.24284157, -0.2600778 , -0.23181725, -0.23622596,  0.04688124,
         0.22362353, -0.15571019, -0.15594843, -0.14903274, -0.16158929,
        -0.25000027, -0.02481774,  0.15283106, -0.20172423,  0.35085642,
         0.136741  , -0.16378599, -0.17805403,  0.38225347, -0.32673699,
         0.17949449,  0.26918328,  0.34491253, -0.11941805, -0.41039693]], dtype="float32"),
 np.array([-0.00596871,  0.02173759, -0.02248017, -0.02286897,  0.03545291,
        0.04430304,  0.04385605, -0.04647953,  0.03241556, -0.03367988,
        0.01376517,  0.00260948, -0.02714422,  0.03247999, -0.05082936,
       -0.02663123, -0.01880552, -0.03927064,  0.04132488, -0.03196674,
        0.03469165, -0.03715397, -0.03311675, -0.03374657,  0.00669732,
        0.03194622, -0.02224431, -0.02227835, -0.02129039, -0.02308419,
       -0.03571433, -0.00354539,  0.02183301, -0.02881775,  0.05012235,
        0.01953443, -0.023398  , -0.02543629,  0.05460764, -0.04667671,
        0.02564207,  0.03845475,  0.04927322, -0.01705972, -0.05862813], dtype="float32"),
 np.array([[-0.00324882, -0.01109987, -0.01450824, -0.02192629, -0.02689291,
        -0.03427217],
       [ 0.03569948,  0.06693184,  0.1029748 ,  0.13482925,  0.16482866,
         0.19627523],
       [-0.01128949, -0.01369493, -0.02490166, -0.02823417, -0.03438492,
        -0.03759093],
       [-0.02966636, -0.05312287, -0.08301067, -0.10722829, -0.1310426 ,
        -0.1549221 ],
       [ 0.01557316,  0.02953453,  0.04526615,  0.05946597,  0.07270302,
         0.08672479],
       [ 0.02418056,  0.04666322,  0.07111043,  0.09388465,  0.11479726,
         0.13729477],
       [ 0.01778178,  0.03758955,  0.05565129,  0.0753534 ,  0.0921942 ,
         0.11169169],
       [-0.02116442, -0.04196791, -0.06339453, -0.08434323, -0.10314974,
        -0.12385586],
       [ 0.02310548,  0.04093312,  0.06419976,  0.08266334,  0.10101391,
         0.1192143 ],
       [-0.03136177, -0.05906919, -0.09073961, -0.11896713, -0.14544198,
        -0.17331108],
       [ 0.00448324,  0.00155808,  0.00590906,  0.00373137,  0.00444123,
         0.0022146 ],
       [ 0.00072522, -0.0003009 ,  0.00038877, -0.00046239, -0.00059446,
        -0.00145334],
       [-0.01564521, -0.02426046, -0.03992627, -0.04930998, -0.06019224,
        -0.06939889],
       [ 0.03039326,  0.05658563,  0.08726113,  0.11402199,  0.13938479,
         0.16579854],
       [-0.03196862, -0.06337221, -0.09573638, -0.12736127, -0.15575944,
        -0.18701789],
       [-0.01244252, -0.01998656, -0.0324632 , -0.04055071, -0.04951447,
        -0.05746092],
       [-0.0078375 , -0.01947967, -0.02751514, -0.03882611, -0.047549  ,
        -0.05876882],
       [-0.03913254, -0.07724691, -0.11685529, -0.15527244, -0.18988863,
        -0.22785737],
       [ 0.03425064,  0.06667315,  0.10131626,  0.1340954 ,  0.1639747 ,
         0.19636168],
       [-0.01313976, -0.02634083, -0.03965069, -0.05291402, -0.06471732,
        -0.07782995],
       [ 0.01537992,  0.02851674,  0.04403647,  0.05747246,  0.07025443,
         0.08351479],
       [-0.04194552, -0.08330916, -0.12577778, -0.16741616, -0.20474815,
        -0.24590573],
       [-0.01321718, -0.02897906, -0.04243094, -0.05801272, -0.0709943 ,
        -0.08642367],
       [-0.03974428, -0.07788315, -0.11809607, -0.15659831, -0.19150051,
        -0.22954752],
       [ 0.00077857, -0.00505777, -0.00443864, -0.00962432, -0.01188029,
        -0.01707268],
       [ 0.02224709,  0.03895525,  0.06134582,  0.07871097,  0.09617567,
         0.11328757],
       [-0.02644567, -0.04559295, -0.07219087, -0.09218892, -0.11263077,
        -0.13232802],
       [-0.01237341, -0.01500619, -0.02728881, -0.03093802, -0.03767769,
        -0.04118828],
       [-0.0297678 , -0.05296032, -0.08294151, -0.1069314 , -0.13067344,
        -0.15432416],
       [-0.03758856, -0.07156031, -0.10953833, -0.14405887, -0.17613095,
        -0.21022165],
       [-0.01641596, -0.03031721, -0.0468793 , -0.06111164, -0.07470083,
        -0.08874576],
       [-0.00160384, -0.00245955, -0.0040648 , -0.00500197, -0.00610528,
        -0.00702431],
       [ 0.03324578,  0.0611927 ,  0.09472916,  0.12336673,  0.1507957 ,
         0.1790538 ],
       [-0.01660954, -0.02709297, -0.04375863, -0.05492718, -0.06707729,
        -0.07805741],
       [ 0.02656231,  0.05257191,  0.07946074,  0.10566235,  0.12922084,
         0.15511802],
       [ 0.00813241,  0.020215  ,  0.02855289,  0.0402916 ,  0.04934377,
         0.06098789],
       [-0.01967326, -0.0306362 , -0.05033869, -0.06225526, -0.07599716,
        -0.08769105],
       [-0.01280246, -0.01898922, -0.03178643, -0.03868638, -0.04720594,
        -0.05396128],
       [ 0.02370949,  0.05065173,  0.07474812,  0.1014975 ,  0.1241896 ,
         0.150666  ],
       [-0.02740013, -0.05319722, -0.08090772, -0.10700383, -0.13084418,
        -0.15662663],
       [ 0.010254  ,  0.02015354,  0.03052998,  0.04051744,  0.04954885,
         0.05941883],
       [ 0.0180388 ,  0.03418059,  0.05240216,  0.06882308,  0.0841425 ,
         0.10035719],
       [ 0.03101159,  0.06114773,  0.09253465,  0.12291744,  0.15031931,
         0.18034676],
       [-0.00619628, -0.00556535, -0.01166623, -0.01173486, -0.01423947,
        -0.01423933],
       [-0.02957504, -0.06079299, -0.09078945, -0.12200043, -0.14923935,
        -0.18011062]], dtype="float32"),
 np.array([ 0.06043035,  0.12370294,  0.18498118,  0.24828985,  0.30371699,
        0.36633173], dtype="float32")];

def convert(kerasWeights):
    layers = []
    bias = False
    for layer in kerasWeights:
        if not bias:
            units = []
            for i in range(len(layer)):
                unitWeights = layer[i]
                if len(unitWeights) > len(units):
                    for j in range(len(unitWeights)):
                        units.append([]);
                for j in range(len(unitWeights)):
                    units[j].append(unitWeights[j])
        else:
            for j in range(len(layer)):
                units[j].append(layer[j])
        if bias:
            layers.append(units)
        bias = not bias
    return layers

def printConverted(layers):
    import json
    from json import encoder
    def pretty_floats(obj):
        if isinstance(obj, float):
            return obj
        elif isinstance(obj, dict):
            return dict((k, pretty_floats(v)) for k, v in obj.items())
        elif isinstance(obj, (list, tuple)):
            return list(map(lambda x: pretty_floats(x), obj))             
        out = np.asscalar(obj)
        return out
    print(json.dumps(pretty_floats(layers), indent=4, sort_keys=True))