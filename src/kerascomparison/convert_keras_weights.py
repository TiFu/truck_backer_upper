
# Keras
# Element for each layer
    # [0] for each input one value per neuron (so 7 times an array with 45)
    # [1] Bias for each neuron
# What I need
# Element for each layer
    # for each neuron one array with 7 entries
import numpy as np
"""weights = [[[-0.00376929,  0.03486726],
       [ 0.01342994,  0.0231015 ],
       [ 0.01735607, -0.03529174]], [ 0.00200979, -0.00523797],[[ 0.56883514,  0.89121616,  1.03019452],
       [ 0.86656129,  0.84186172, -0.60320234]],[ 0.,  0.,  0.]]
"""
weights =  [ np.array([[ 0.00781169,  0.02207145, -0.01844776, -0.0233706 ,  0.00477051,
         0.00548521, -0.00158375, -0.00322792,  0.01371755, -0.01266035,
         0.01371009,  0.00280405, -0.01538315,  0.01499625, -0.00542136,
        -0.00991149,  0.00559204, -0.00869793,  0.00892772, -0.00123948,
         0.00589288, -0.00922348,  0.00277068, -0.01169188,  0.01203713,
         0.0144367 , -0.0247262 , -0.02142294, -0.02658232, -0.01917413,
        -0.00632579, -0.00103949,  0.02384536, -0.0131817 ,  0.00389394,
        -0.00608547, -0.02326055, -0.01374001, -0.00406671, -0.00661717,
         0.00109564,  0.0049222 ,  0.00608905, -0.01334676,  0.00078399],
       [ 0.01562338,  0.04414291, -0.03689552, -0.04674121,  0.00954101,
         0.01097042, -0.0031675 , -0.00645584,  0.0274351 , -0.02532069,
         0.02742018,  0.0056081 , -0.0307663 ,  0.0299925 , -0.01084271,
        -0.01982298,  0.01118409, -0.01739587,  0.01785544, -0.00247896,
         0.01178575, -0.01844696,  0.00554135, -0.02338376,  0.02407426,
         0.0288734 , -0.0494524 , -0.04284588, -0.05316463, -0.03834826,
        -0.01265157, -0.00207898,  0.04769071, -0.0263634 ,  0.00778788,
        -0.01217093, -0.0465211 , -0.02748002, -0.00813342, -0.01323434,
         0.00219127,  0.0098444 ,  0.0121781 , -0.02669352,  0.00156797],
       [ 0.02343508,  0.06621435, -0.05534329, -0.07011181,  0.01431151,
         0.01645563, -0.00475125, -0.00968375,  0.04115265, -0.03798103,
         0.04113028,  0.00841216, -0.04614945,  0.04498876, -0.01626407,
        -0.02973447,  0.01677613, -0.0260938 ,  0.02678316, -0.00371845,
         0.01767863, -0.02767044,  0.00831203, -0.03507563,  0.03611139,
         0.04331009, -0.0741786 , -0.06426881, -0.07974694, -0.0575224 ,
        -0.01897736, -0.00311847,  0.07153606, -0.03954511,  0.01168182,
        -0.0182564 , -0.06978166, -0.04122004, -0.01220012, -0.01985151,
         0.00328691,  0.0147666 ,  0.01826715, -0.04004027,  0.00235196],
       [ 0.03124677,  0.08828582, -0.07379104, -0.09348242,  0.01908202,
         0.02194085, -0.006335  , -0.01291167,  0.0548702 , -0.05064138,
         0.05484036,  0.01121621, -0.06153261,  0.059985  , -0.02168543,
        -0.03964595,  0.02236817, -0.03479173,  0.03571088, -0.00495793,
         0.02357151, -0.03689393,  0.01108271, -0.04676751,  0.04814851,
         0.05774679, -0.09890479, -0.08569175, -0.10632926, -0.07669652,
        -0.02530315, -0.00415796,  0.09538142, -0.05272681,  0.01557576,
        -0.02434186, -0.0930422 , -0.05496005, -0.01626683, -0.02646868,
         0.00438254,  0.0196888 ,  0.0243562 , -0.05338703,  0.00313595],
       [ 0.03905846,  0.11035725, -0.09223881, -0.11685302,  0.02385252,
         0.02742606, -0.00791875, -0.01613959,  0.06858775, -0.06330173,
         0.06855045,  0.01402027, -0.07691576,  0.07498126, -0.02710679,
        -0.04955744,  0.02796021, -0.04348967,  0.04463859, -0.00619742,
         0.02946438, -0.04611741,  0.01385339, -0.05845939,  0.06018564,
         0.07218349, -0.12363101, -0.1071147 , -0.13291156, -0.09587066,
        -0.03162894, -0.00519744,  0.11922677, -0.06590851,  0.0194697 ,
        -0.03042733, -0.11630277, -0.06870008, -0.02033354, -0.03308585,
         0.00547817,  0.024611  ,  0.03044524, -0.06673379,  0.00391993],
       [ 0.04687016,  0.13242871, -0.11068657, -0.14022361,  0.02862303,
         0.03291126, -0.0095025 , -0.01936751,  0.0823053 , -0.07596207,
         0.08226055,  0.01682432, -0.09229891,  0.08997752, -0.03252814,
        -0.05946893,  0.03355225, -0.0521876 ,  0.05356632, -0.0074369 ,
         0.03535726, -0.05534089,  0.01662406, -0.07015127,  0.07222277,
         0.08662018, -0.1483572 , -0.12853763, -0.15949386, -0.11504479,
        -0.03795472, -0.00623694,  0.14307214, -0.07909021,  0.02336365,
        -0.0365128 , -0.13956331, -0.08244008, -0.02440025, -0.03970301,
         0.00657381,  0.0295332 ,  0.0365343 , -0.08008054,  0.00470392],
       [ 0.05468185,  0.15450019, -0.12913433, -0.16359423,  0.03339354,
         0.03839648, -0.01108625, -0.02259543,  0.09602285, -0.08862242,
         0.09597063,  0.01962837, -0.10768206,  0.10497376, -0.0379495 ,
        -0.06938042,  0.0391443 , -0.06088554,  0.06249404, -0.00867638,
         0.04125014, -0.06456437,  0.01939474, -0.08184315,  0.0842599 ,
         0.10105687, -0.17308338, -0.14996058, -0.18607619, -0.13421893,
        -0.04428051, -0.00727643,  0.16691749, -0.09227191,  0.02725758,
        -0.04259826, -0.16282386, -0.09618009, -0.02846695, -0.04632019,
         0.00766945,  0.0344554 ,  0.04262335, -0.0934273 ,  0.00548791]], dtype="float32"),
 np.array([ 0.00781169,  0.02207145, -0.01844776, -0.0233706 ,  0.00477051,
        0.00548521, -0.00158375, -0.00322792,  0.01371755, -0.01266035,
        0.01371009,  0.00280405, -0.01538315,  0.01499625, -0.00542136,
       -0.00991149,  0.00559204, -0.00869793,  0.00892772, -0.00123948,
        0.00589288, -0.00922348,  0.00277068, -0.01169188,  0.01203713,
        0.0144367 , -0.0247262 , -0.02142294, -0.02658232, -0.01917413,
       -0.00632579, -0.00103949,  0.02384536, -0.0131817 ,  0.00389394,
       -0.00608546, -0.02326055, -0.01374001, -0.00406671, -0.00661717,
        0.00109564,  0.0049222 ,  0.00608905, -0.01334676,  0.00078399], dtype="float32"),
 np.array([[-0.0182918 , -0.04269975, -0.06138282, -0.08528792, -0.10441217,
        -0.12810545],
       [ 0.01128693,  0.02634782,  0.03787617,  0.05262678,  0.06442737,
         0.07904728],
       [ 0.02218363,  0.05178471,  0.07444286,  0.10343412,  0.1266273 ,
         0.15536165],
       [-0.00077037, -0.00179832, -0.00258517, -0.00359195, -0.00439737,
        -0.00539523],
       [ 0.00608494,  0.01420446,  0.02041956,  0.02837181,  0.03473367,
         0.04261546],
       [ 0.01222198,  0.02853058,  0.04101399,  0.0569866 ,  0.06976479,
         0.08559588],
       [ 0.02027488,  0.047329  ,  0.06803757,  0.09453434,  0.11573191,
         0.14199388],
       [-0.01457584, -0.03402536, -0.04891298, -0.0679618 , -0.08320096,
        -0.102081  ],
       [-0.00092122, -0.00215046, -0.00309139, -0.0042953 , -0.00525845,
        -0.0064517 ],
       [-0.01084609, -0.02531874, -0.03639682, -0.05057132, -0.06191099,
        -0.07595988],
       [-0.0221848 , -0.05178745, -0.07444679, -0.10343957, -0.12663397,
        -0.15536985],
       [-0.00549456, -0.01282632, -0.01843841, -0.02561912, -0.03136373,
        -0.03848081],
       [ 0.01253698,  0.0292659 ,  0.04207104,  0.05845533,  0.07156286,
         0.08780195],
       [ 0.00823829,  0.01923117,  0.02764568,  0.03841209,  0.0470253 ,
         0.05769631],
       [-0.02194827, -0.0512353 , -0.07365304, -0.10233669, -0.12528381,
        -0.15371329],
       [ 0.00758398,  0.01770378,  0.02544998,  0.03536129,  0.04329041,
         0.0531139 ],
       [-0.01897263, -0.04428907, -0.06366754, -0.0884624 , -0.10829845,
        -0.13287364],
       [-0.02574125, -0.06008948, -0.08638134, -0.12002194, -0.14693463,
        -0.18027715],
       [ 0.01930032,  0.045054  ,  0.06476715,  0.08999027,  0.1101689 ,
         0.13516854],
       [-0.01003306, -0.02342083, -0.0336685 , -0.04678046, -0.05727011,
        -0.07026588],
       [ 0.0037645 ,  0.00878771,  0.01263273,  0.01755245,  0.02148827,
         0.0263644 ],
       [-0.02934767, -0.06850819, -0.09848361, -0.13683736, -0.16752061,
        -0.20553453],
       [-0.01865081, -0.04353782, -0.06258757, -0.08696187, -0.10646145,
        -0.13061975],
       [-0.02417435, -0.05643177, -0.08112322, -0.11271609, -0.13799059,
        -0.16930352],
       [-0.02221888, -0.05186699, -0.07456113, -0.10359843, -0.12682846,
        -0.15560848],
       [-0.00246283, -0.00574915, -0.00826467, -0.01148329, -0.01405821,
        -0.01724831],
       [ 0.00538919,  0.01258033,  0.01808479,  0.02512779,  0.03076223,
         0.03774282],
       [ 0.02432597,  0.05678573,  0.08163203,  0.11342306,  0.13885608,
         0.17036541],
       [ 0.00041343,  0.00096511,  0.00138738,  0.00192769,  0.00235993,
         0.00289545],
       [-0.01562988, -0.03648585, -0.05245006, -0.07287638, -0.08921756,
        -0.10946287],
       [-0.00360266, -0.00840993, -0.01208965, -0.01679788, -0.02056449,
        -0.02523101],
       [ 0.00137988,  0.00322115,  0.00463055,  0.00643389,  0.00787657,
         0.00966393],
       [ 0.0065859 ,  0.01537391,  0.02210069,  0.03070765,  0.03759327,
         0.04612396],
       [ 0.00870068,  0.02031056,  0.02919734,  0.04056804,  0.04966467,
         0.06093463],
       [ 0.01794961,  0.04190097,  0.06023452,  0.08369244,  0.10245892,
         0.12570897],
       [ 0.01969462,  0.04597446,  0.06609035,  0.09182876,  0.11241968,
         0.13793002],
       [ 0.01531813,  0.03575811,  0.0514039 ,  0.07142279,  0.08743802,
         0.10727953],
       [ 0.01323399,  0.03089298,  0.04441005,  0.06170523,  0.07554149,
         0.09268342],
       [ 0.02886524,  0.06738204,  0.09686471,  0.13458799,  0.16476686,
         0.20215587],
       [-0.01495548, -0.03491156, -0.05018694, -0.0697319 , -0.08536799,
        -0.10473976],
       [ 0.00644286,  0.01503999,  0.02162066,  0.03004069,  0.03677675,
         0.04512216],
       [ 0.00694485,  0.01621183,  0.02330523,  0.0323813 ,  0.03964221,
         0.04863785],
       [ 0.02016294,  0.04706768,  0.06766191,  0.09401236,  0.1150929 ,
         0.14120987],
       [ 0.01890099,  0.04412184,  0.06342712,  0.08812837,  0.10788953,
         0.1323719 ],
       [-0.02776964, -0.06482451, -0.09318815, -0.12947962, -0.15851301,
        -0.19448292]], dtype="float32"),
 np.array([ 0.05496728,  0.12831378,  0.18445683,  0.25629228,  0.31376103,
        0.38495997], dtype="float32")];

layers = []
bias = False
for layer in weights:
    if not bias:
        units = []
        for i in range(len(layer)):
            unitWeights = layer[i]
            if len(unitWeights) > len(units):
                for j in range(len(unitWeights)):
                    units.append([]);
            for j in range(len(unitWeights)):
                units[j].append(unitWeights[j])
    else:
        for j in range(len(layer)):
            units[j].append(layer[j])
    if bias:
        layers.append(units)
    bias = not bias

import json
from json import encoder

def pretty_floats(obj):
    if isinstance(obj, float):
        return obj
    elif isinstance(obj, dict):
        return dict((k, pretty_floats(v)) for k, v in obj.items())
    elif isinstance(obj, (list, tuple)):
        return list(map(lambda x: pretty_floats(x), obj))             
    out = np.asscalar(obj)
    return out
print(json.dumps(pretty_floats(layers), indent=4, sort_keys=True))